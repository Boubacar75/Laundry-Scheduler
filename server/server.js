const express = require('express'); // include node module to run a web or app server.
const bodyParser = require('body-parser'); // parse field data from an post request, could be HTML form.
const app = express(); // instaniating the app server into memory from the Express module referenced by variable app;
const cors = require('cors'); // node module to allow cross site scripting.
const port = 3001; // port the Express server will listen to for requests from various clients get or post request.
const Pool = require('pg').Pool // requiring the node module to connect to PostGress (pg) database.
const pool = new Pool({ // create the connection to PostGres.
  user: 'postgres',  // postgres username
  host: 'localhost', // host postgres is running on, i.e. localhost means this computer
  database: 'laundry', // database
  password: 'Arouna$35', // password
  port: 5432, // port PostGres is running on.  5432 default port for PostGres.
});
app.use(cors()); // use and allow cross site scripting.
// Postgres PWD: Test1234
app.use(bodyParser.json()) // to allow post requests using JSON format.
app.use(  // body data can encoded in the url.
  bodyParser.urlencoded({
    extended: true,
  })
)
app.get('/', (request, response) => {  
// this is the default get route for the server, i.e. http://localhost:3001
  response.json({ info: 'Node.js, Express, and Postgres API' })
})
app.post("/reserve", (req, res)=>{ // post route to recieve reservation information from react client.
    // three form elements: 
    const userId = req.body.userId; 
    const date = req.body.date;
    const time = req.body.time;

    console.log ("RESERVE: "+date);
    // CREATE TABLE reservations ( ID SERIAL PRIMARY KEY,user_id INT, reservation_dt DATE, reservation_tm VARCHAR(20))
    // Insert reservation intot he PostGres database.
    pool.query('INSERT INTO reservations (user_id, reservation_dt, reservation_tm) VALUES ($1, $2, $3)',
         [userId, date, time], (error, result) => {
    if (error) { // was there an error?
        // Send error message back to client:
        res.status(201).send({id: 0, status:-1, message:"Error making reservation"});
    }else { // Success
        // Send success message back to client:
        console.log("RESERVE", result);
        const msg = `Reservation confirmed `; // insertId is the primary key generated by PostGres
        res.status(201).send({id:result.insertId, status:1, message: msg});
    }
  })
});
app.post("/login", (req, res)=>{ // when React client submit login to server.
    const user=req.body.email; // this the email the user entered on the React login form.
    const pwd = req.body.password;// this the password the user entered on the React login form.
    console.log ("login: "+user); // log message for debugging purposes.
    // Query PostGres users table with email and password.
    pool.query('SELECT id, email FROM users WHERE email =$1 AND password=$2',[user,pwd],
     (error, results) => {
         console.log(results.rows);
        if (error) {
            res.send({id: 0, status: -1, message: "login query failed!"});
        }
        else if (results.rows.length>0) // more than 0 rows the query succeeded so the user provided the correct email and passwrod.
        {
            res.send({id: results.rows[0].id,email: results.rows[0].email,  status:1, message:"user logged in"});
        }else { // Zero rows means the query failed probably because user gave the wrong email or password
            res.send({id: 0, status: 0, message: "Incorrect email and/or password!"});
        }
      })
});
app.get('/delete',(req, res) => {
    const id = req.query.id;
    if(id<1)
    {
        res.send({status: -1, message: "Missing ID"});
        return;
    }
    pool.query('DELETE FROM reservations WHERE id = '+id, (error, results) => {
      if (error) {
          res.send({id:0, status:-1, message:"User deleting reservation"});
      }else {
          res.send({id:id, status:1, message:"reservation deleted"});
      }
      
    })
  });
// route just for testing:
app.get('/users',(request, response) => {
  pool.query('SELECT * FROM users ORDER BY id ASC', (error, results) => {
    if (error) {
        response.send({id:0, status:-1, message:"User insert failed"});
    }else {
        response.send({id:results.insertId, status:1, message:"User profile created"});
    }
    
  })
});
// route just for testing:
app.get('/reservations',(request, response) => {
    pool.query('SELECT * FROM reservations', (error, results) => {
      if (error) {
          response.send({id:0, status:-1, message:"User insert failed"});
      }else {
          response.send(results.rows);
         ///// response.send({id:results.insertId, status:1, message:"User profile created"});
      }
      
    })
  });

// route to receive new user data:
app.post('/addUser', (request, response) => {
  const { name, email } = request.body // user info from React form.
console.log(name); // logging for debuggin.

    // Insert into PostGress table users:
  pool.query('INSERT INTO users (name, email) VALUES ($1, $2)', [name, email],
   (error, result) => {
    if (error) {
      throw error
    }
    response.status(201).send(`User added with ID: ${result.insertId}`)
  })
  response.send("user: "+name+" added");
});
app.listen(port, () => {
  console.log(`App running on port ${port}.`)
})